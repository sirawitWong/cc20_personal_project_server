// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
        provider = "prisma-client-js"
        output   = "../src/generated/prisma"
}

datasource db {
        provider = "mysql"
        url      = env("DATABASE_URL")
}

enum Roles {
        USER
        ADMIN
        SUPER
}

enum UserStatus {
        ACTIVE
        BANNED
}

model User {
        id         Int            @id @default(autoincrement())
        firstName  String
        lastName   String
        username   String         @unique
        password   String
        role       Roles          @default(USER)
        profilePic String?
        bio        String?
        createdAt  DateTime       @default(now())
        updatedAt  DateTime       @updatedAt
        recipe     Recipe[]
        review     Review[]
        following  FollowStatus[] @relation(name: "following")
        follower   FollowStatus[] @relation(name: "follower")
        userStatus UserStatus     @default(ACTIVE)
}

model FollowStatus {
        id          Int      @id @default(autoincrement())
        followerId  Int
        followingId Int
        createdAt   DateTime @default(now())
        updatedAt   DateTime @updatedAt
        follower    User     @relation(name: "follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
        following   User     @relation(name: "following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Categories {
        MAIN_DISH
        SIDE_DISH
        DESERT
        DRINK
        SNACK
        OTHER
}

model Recipe {
        id          Int          @id @default(autoincrement())
        name        String
        description String?
        createdAt   DateTime     @default(now())
        updatedAt   DateTime     @updatedAt
        category    Categories
        userId      Int
        user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
        ingredient  Ingredient[]
        equipment   Equipment[]
        instruction String
        serving     Int          @default(1)
        image       String?
        review      Review[]
}

model Ingredient {
        id           Int      @id @default(autoincrement())
        name         String
        image        String?
        protein      Float?
        carbohydrate Float?
        fat          Float?
        recipe       Recipe[]
}

model Equipment {
        id     Int      @id @default(autoincrement())
        name   String
        image  String?
        recipe Recipe[]
}

model Review {
        id       Int     @id @default(autoincrement())
        userId   Int
        recipeId Int
        title    String
        body     String
        image    String?
        reviewer User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
        recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
